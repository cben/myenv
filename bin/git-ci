#!/bin/bash
# Commit then push.  Similar in spirit to `svn ci`.

# Allow `git ci DIR` or `git ci FILES...` even if outside the git directory.
# (Also *tries* to allow options, which get passed to git add/commit.)

# chdir into the directory will not work because then relative paths passed to
# `git add` would be broken; instead stay where we are but config git/work dirs.
# BUG: THAT DOESN'T WORK EITHER!  SHOULD REWRITE ARGS...

for arg; do
  if [ -e "$arg" ]; then  # try to skip options and find a file/dirname.
    if [ ! -d "$arg" ]; then
      arg="$(dirname "$arg")"
    fi
    if (cd "$arg" && git rev-parse --show-toplevel 2>/dev/null); then
      export GIT_WORK_TREE="$(cd "$arg"; git rev-parse --show-toplevel)"
      # `git rev-parse --git-dir` may give relative or absolute path.
      export GIT_DIR="$(cd "$arg"; cd "$(git rev-parse --git-dir)"; pwd -P)"
      echo "GIT_WORK_TREE=$GIT_WORK_TREE    GIT_DIR=$GIT_DIR"
      break
    fi
  fi
done

if [ $# -gt 0 ]; then
  # citool takes no args, but it can pick up things we stage first.
  # `--update DIR` does the more useful "stage all changes under DIR/"
  # rather than "add ALL files under DIR/".
  # BUG: an explicit `git ci NEWFILE` will silently not add it.
  #      Simple loop testing whether each arg is a dir wouldn't
  #      support non-path options.
  git add --verbose --update "$@"
fi

git hook run pre-commit

hash_before_commit="$(git rev-parse HEAD)"

# Returns non-0 if cancelled
function make_commit {
  if [ -v DISPLAY ] && git help citool >&/dev/null; then
    # Without args, we could auto-stage all changes but `citool` is more
    # keyboard-friendly if we don't (I found no way to access file list with kbd; you
    # can stage files by just repeatedly pressing Ctrl+T but you can't unstage by Ctrl+U)

    # git-gui pops a dialog if it doesn't find spelling dictionary for current locale.
    # Fix: install `aspell-en` etc.
    # https://bugs.launchpad.net/ubuntu/+source/git/+bug/890783
    env LANG=en_US.utf8 git citool
  else
    # Not using `--interactive`/`--patch` because the interface sucks.
    # TODO: learn to use `tig` for interactive commit?
    if [ $# -gt 0 ]; then
      git commit --verbose  # only what was staged
    else
      git commit --verbose -a
    fi
  fi
}

# Print name of "my fork" remote, or return non-0
function my_remote {
  # Limit to 1 match to avoid unexpected expansion
  git remote show | grep --max-count=1 --line-regexp -E 'cben|bpaskinc'
}

# Optional extra args (refspec / flags) used after remote IFF remote is my fork.
function push {
  if remote="$(my_remote)"; then
    (
      set -x;
      git push --verbose --recurse-submodules=on-demand --set-upstream "$remote" "$@"
    )
  else
    # Push to default remote, if any.
    # git config branch."$(git symbolic-ref --quiet HEAD)".remote
    if [ "$#" -gt 0 ]; then
      echo "using default remote, to be safe NOT passing args: $*"
    fi
    (
      set -x
      git push --verbose --recurse-submodules=on-demand
    )
  fi
}

if ! make_commit; then
  echo Commit cancelled, so not pushing.
  exit 1
fi

if ! branch="$(git symbolic-ref --short HEAD)"; then
  echo "Detached HEAD?  No branch to push."
  exit 8
fi

if git merge-base --is-ancestor "$hash_before_commit" HEAD; then
  # 1 or more commits appended, fast-forward push is safe.
  push "$branch" || echo '`git push` failed.'
elif git merge-base --is-ancestor "${hash_before_commit}~1" HEAD; then
  if [[ "$branch" =~ 'stable|main|master|develop' ]]; then
    echo "Last commit amended, but refusing to force $branch."
    echo "If you're sure, push yourself with --force-with-lease='$branch:$hash_before_commit'"
    exit 11
  fi

  # TODO: given this sequence:
  #
  #        citool (no push)      citool (no push)
  #     R---------------------A---------------------B
  #     ^                      \                       ci (amend of B)
  #  remote/branch              ---------------------------------------C
  #
  # we'll arrive here - exactly 1 commit amended B->C
  # but force-with-lease will fail because remote (R) != hash_before_commit (A).
  # However, the new commit is fast-forward so regular push would be safe?

  echo "Last commit amended, allowing careful push:"
  push "$branch" --force-with-lease="$branch:$hash_before_commit" || echo '`git push` failed.'
else
  echo "Rewrote multiple commits?!  Not pushing."
  echo "If you're sure, push yourself with --force-with-lease='$branch:$hash_before_commit'"
  exit 11
fi
